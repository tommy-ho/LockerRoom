package com.LockerRoom.Utils;

import java.util.Base64;
import java.util.Random;
import java.util.regex.Pattern;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

/**
 * A utility class with static methods for use from from the LockerRoomRegistrar
 * class without the need to create instances. This class has default access modifier,
 * which was done to restrict access to only the LockerRoomRegistrar class (and other
 * classes in the com.LockerRoom.Utils package.
 * 
* @author  Tommy Ho
* */
class LockerRoomCipher {
	
	/**
	 * A static method meant for encrypting the password String into
	 * a secure format to be documented.
	 * <p>
	 * The method utilizes the javax.crypto.spec.SecretKeySpec and
	 * javax.crypto.Cipher classes to encrypt the password.
	 * It utilize a private method getKeyBytes() to generates us
	 * a random 16 byte array to then help generate the SecretKeySpec.
	 * After encryption, Base64 encoder is used to encode the encrypted
	 * password to make sure the content of our password isn't lost or
	 * distorted through changing it back to String. At the same time,
	 * the method also ensures to encode the Initialization Value (IV)
	 * of the Cipher object and the key bytes we used to generate the
	 * SecretKeySpec; those 3 items are needed to successfully decrypt
	 * the password.
	 *
	 * @param pw the password to be encrypted
	 * @return String the password, IV, and key bytes returned in an encrypted and encoded format
	 * @see #getKeyBytes()
	 * @see #decryptPW(String)
	 */
	static String encryptPW(String pw){
		byte[] pwBytes = pw.getBytes();
    	//byte[] keyBytes = "0123456789abcdef".getBytes();
		byte[] keyBytes = getKeyBytes();
    	SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");
    	String encodedIV = null;
    	String encodedKeyBytes = null;
        try {
        	Cipher ciph = Cipher.getInstance("AES/CBC/PKCS5Padding");
            ciph.init(Cipher.ENCRYPT_MODE, keySpec);
            
            ////////////////////printing encrypted, pre-encoded bytes
        	for (byte b : ciph.doFinal(pwBytes)){
    			System.out.print(b);
    		}
    		System.out.println();
    		///////////////////////
    		
            pw = Base64.getEncoder().encodeToString(ciph.doFinal(pwBytes));
            encodedIV = Base64.getEncoder().encodeToString(ciph.getIV());
            encodedKeyBytes = Base64.getEncoder().encodeToString(keyBytes);
            
		} catch (Exception e){
			e.printStackTrace();
		}
		return encodedKeyBytes + "|||" + encodedIV + "|||" + pw;
	}
	
	/**
	 * A static method meant for decrypting the password String into
	 * its original form for processing.
	 * <p>
	 * The method splits the encoded String consisting of the password,
	 * IV, and key bytes up based on delimiter. After decoding, we are
	 * left with our original IV bytes and key bytes. With this information,
	 * a Cipher object can easily decrypt and return the original password
	 * String.
	 *
	 * @param pw the password String (along with the IV and key bytes) to be decrypted
	 * @return String the decoded, decrypted password
	 * @see #encryptPW(String)
	 */
	static String decryptPW(String pw){
    	String[] lineArray= pw.split(Pattern.quote("|||"));

		byte[] pwBytes = Base64.getDecoder().decode(lineArray[2].getBytes());
		
		/////////////////////printing decoded, still encrypted bytes
		for (byte b : pwBytes){
			System.out.print(b);
		}
		System.out.println();
		//////////////////////
    	byte[] keyBytes = Base64.getDecoder().decode(lineArray[0].getBytes());
		byte[] ivBytes = Base64.getDecoder().decode(lineArray[1].getBytes());
    	//byte[] keyBytes = "0123456789abcdef".getBytes();
    	SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");
        try {
			Cipher ciph = Cipher.getInstance("AES/CBC/PKCS5Padding");
            ciph.init(Cipher.DECRYPT_MODE, keySpec, new IvParameterSpec(ivBytes));
            pw = new String(ciph.doFinal(pwBytes));    
		} catch (Exception e){
			e.printStackTrace();
		}
		return pw;
	}
	
	/**
	 * A utility method meant to generate and return a byte array of 16 random bytes.
	 *
	 * @param
	 * @return byte[] the byte array of 16 randomly generated bytes
	 * @see #encryptPW(String)
	 */
	private static byte[] getKeyBytes(){
		byte[] keyBytes = new byte[16];
		for (int i = 0; i < keyBytes.length; i++){
			new Random().nextBytes(keyBytes);
		}
		return keyBytes;
	}

}
